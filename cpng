#!/bin/bash
# Nginx for cPanel: https://github.com/zhubanRuban/cpng
# Copyright zhubanRuban: https://github.com/zhubanRuban
# Licensed under the Apache License 2.0: http://www.apache.org/licenses/LICENSE-2.0

printmes()    {
    case "$2" in
        red)    echo -e "\e[1;31m$1\e[0m";;
        yellow) echo -e "\e[1;33m$1\e[0m";;
        green)  echo -e "\e[1;32m$1\e[0m";;
        blue)   echo -e "\e[1;34m$1\e[0m";;
        *)      echo -e "$1";;
    esac
}
printlog()    { sed "s/^/$(date) | /g" <<< "$1" >> "$LOGFILE"; }
printmeslog() { printmes "$1" "$2"; printlog "$1"; }

systeminit () { [ -z "$VERSION_ID" ] || return 0

    printmeslog 'Checking OS version...' blue
    VERSION_ID=$(tr -dc '0-9.' < /etc/redhat-release|cut -d\. -f1)
    printmeslog "$VERSION_ID"

    [ -z "$VERSION_ID" ] && { printmeslog 'Failed! Could not identify OS version. Is it CentOS?' red; exit 1; }
    [ "$VERSION_ID" -ge '6' ] || { printmeslog 'CentOS 6/7/8 required' red; exit 1; }
    [ ${EUID:-$(id -u)} -eq 0 ] || { printmeslog 'This tool must be run by root' red; exit 1; }

    printmeslog 'Checking cPanel version...' blue
    CPANELVER=$(/usr/local/cpanel/cpanel -V || { printmes 'Failed! Is cPanel installed and functional?' red; exit 1; })
    printmeslog "$CPANELVER"

    grep -q Engintron /etc/nginx/nginx.conf 2>/dev/null && { printmeslog 'Engintron is installed, delete it to prevent conflicts' red; exit 1; }

    [ "$VERSION_ID" -ge '8' ] && PKGMGR=dnf || PKGMGR=yum

}

cpnginstall () {

    systeminit

    printmeslog 'Setting up Nginx...' blue

    rpm -q epel-release || $PKGMGR -y install epel-release
    echo '[nginx-stable]
name=nginx stable repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=1
enabled=1
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true

[nginx-mainline]
name=nginx mainline repo
baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
gpgcheck=1
enabled=0
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true' > /etc/yum.repos.d/nginx.repo
    rpm -q bash-completion ea-apache24-mod_remoteip nginx || $PKGMGR -y install bash-completion ea-apache24-mod_remoteip nginx
    [ "$VERSION_ID" -le '6' ] && chkconfig nginx on || systemctl enable nginx
    for NGINXCONF in $(find /etc/nginx -type f -name *.conf); do
        sed -i 's/^user .*/user nobody nobody;/g' "$NGINXCONF"
    done

    printmeslog 'Generating snippets...' blue
    rm -f /etc/nginx/"$WHATSMYREALNAME"*.conf

    NGINXPROXY=/etc/nginx/"$WHATSMYREALNAME".global.proxy.conf
    printmeslog 'for proxy: '"$NGINXPROXY" blue
        CFIPS=$(curl -skL https://www.cloudflare.com/ips-v4 https://www.cloudflare.com/ips-v6)
    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
# Cloudflare
'"$(sed 's/^/    set_real_ip_from /' <<< "$CFIPS"|sed 's/$/;/')"'
    real_ip_header CF-Connecting-IP;
    real_ip_recursive on;' > "$NGINXPROXY"; chmod 0600 "$NGINXPROXY"

    NGINXGHTTPS=/etc/nginx/"$WHATSMYREALNAME".global.https.conf
    printmeslog 'for https: '"$NGINXGHTTPS" blue
    [ -f "/etc/ssl/certs/dhparam.pem" ] || {
        curl -skL https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/ssl/certs/dhparam.pem
        chmod 0600 /etc/ssl/certs/dhparam.pem; chown root:nobody /etc/ssl/certs/dhparam.pem
    }
    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
    ssl_certificate /var/cpanel/ssl/cpanel/cpanel.pem;
    ssl_certificate_key /var/cpanel/ssl/cpanel/cpanel.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;

    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=63072000" always;' > "$NGINXGHTTPS"; chmod 0600 "$NGINXGHTTPS"

    NGINXGZIP=/etc/nginx/"$WHATSMYREALNAME".global.gzip.conf
    printmeslog 'for gzip: '"$NGINXGZIP" blue
    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component
        text/xml
        text/javascript;' > "$NGINXGZIP"; chmod 600 "$NGINXGZIP"

    NGINXFPM=/etc/nginx/"$WHATSMYREALNAME".nginxcommon.general.conf
    printmeslog 'for Nginx common server block: '"$NGINXFPM" blue
    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'

        location = /wp-config.txt {
                deny all;
                access_log off;
                log_not_found off;
        }

        location /wp-content/uploads/ {
                location ~ \.(phtml|php[0-9]*)$ {
                        #Prevent Direct Access Of PHP Files From Web Browsers
                        deny all;
                }
        }

        location = /favicon.ico {
                access_log off;
                log_not_found off;
                expires max;
        }

        location = /robots.txt {
                try_files $uri $uri/ /index.php?$args;
                access_log off;
                log_not_found off;
        }

        location ~* \.(ogg|ogv|svg|svgz|eot|otf|woff|woff2|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|swf)$ {
                add_header "Access-Control-Allow-Origin" "*";
                access_log off;
                log_not_found off;
                expires max;
        }

        location ~*  \.(css|js)$ {
                expires 1d;
                add_header Cache-Control "public, must-revalidate";
        }

        location ^~ (/\.well-known/acme-challenge/|/\.well-known/cpanel-dcv/|/\.well-known/pki-validation/) {
                auth_basic off;
                allow all;
                try_files $uri =404;
                break;
        }

        location ~ (/\.|/error_log$|/php\.ini$) {
                deny all;
                access_log off;
                log_not_found off;
        }
    
        location ~* ^.+\.(bak|log|old|orig|original|php#|php~|php_bak|save|swo|swp|sql)$ {
                deny all;
                access_log off;
                log_not_found off;
        }

        if ($uri ~* "^.+(readme|license|example)\.(txt|html)$") {
                return 403;
        }' > "$NGINXFPM"; chmod 600 "$NGINXFPM"

    rm -f /etc/apache2/conf.d/"$WHATSMYREALNAME".*
    APACHEPROXY=/etc/apache2/conf.d/"$WHATSMYREALNAME".nginxproxy.conf
    printmeslog 'Generating Nginx remoteip settings for Apache: '"$APACHEPROXY" blue
    (
        echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
<IfModule remoteip_module>
    RemoteIPHeader        X-Forwarded-For
    RemoteIPInternalProxy 127.0.0.1'
        for NGINXPROXYAPACHE in $( (curl --compressed -skL https://cpanel.net/showip.cgi 2>/dev/null; hostname -I) | sort -u); do
            echo '    RemoteIPInternalProxy '"$NGINXPROXYAPACHE"
        done
        echo '</IfModule>'
    ) > "$APACHEPROXY"; chmod 0600 "$APACHEPROXY"

    grep -qE '^apache.*port=.*:(80|443)$' /var/cpanel/cpanel.config && {
        printmeslog 'Changing Apache ports to 8080 and 8443...' blue
        whmapi1 set_tweaksetting key=apache_port value=0.0.0.0:8080
        whmapi1 set_tweaksetting key=apache_ssl_port value=0.0.0.0:8443
        /scripts/rebuildhttpdconf
        /scripts/restartsrv_apache_php_fpm
        sleep 2
        /scripts/restartsrv_httpd
    }

    nginxrebuild
    nginxreload

    printmeslog 'Setting up '"$WHATSMYREALNAME"'...' blue
    yes | cp -fp "$WHEREAMI" /usr/local/bin/"$WHATSMYREALNAME" 2>/dev/null || true; chmod 0700 /usr/local/bin/"$WHATSMYREALNAME"

    printmeslog 'generating cron: '/etc/cron.d/"$WHATSMYREALNAME" blue
    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
0 4 * * * root /usr/local/bin/'"$WHATSMYREALNAME"' update > /dev/null 2>&1
* * * * * root /usr/local/bin/'"$WHATSMYREALNAME"' cron > /dev/null 2>&1' > /etc/cron.d/"$WHATSMYREALNAME"; chmod 0600 /etc/cron.d/"$WHATSMYREALNAME"
    service crond reload || true
    printmeslog 'cPanel scripts: /scripts/rebuildnginxconf /scripts/restartsrv_nginx' blue
    echo '#!/bin/bash
# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
/usr/local/bin/'"$WHATSMYREALNAME"' rebuild' > /scripts/rebuildnginxconf; chmod 0700 /scripts/rebuildnginxconf
    echo '#!/bin/bash
# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
/usr/local/bin/'"$WHATSMYREALNAME"' reload' > /scripts/restartsrv_nginx; chmod 0700 /scripts/restartsrv_nginx
    printmeslog 'completions: '/etc/profile.d/"$WHATSMYREALNAME".sh blue
    gencompletion > /etc/profile.d/"$WHATSMYREALNAME".sh; chmod 0600 /etc/profile.d/"$WHATSMYREALNAME".sh

    printmeslog "$WHATSMYREALNAME"' installed' green

}

cpngupdate () {

    printmeslog "Getting the latest $WHATSMYREALNAME version..." blue
    curl -skL https://raw.githubusercontent.com/zhubanRuban/"$WHATSMYREALNAME"/master/"$WHATSMYREALNAME" > /"$WHATSMYREALNAME"
    chmod 0700 /"$WHATSMYREALNAME"
    /"$WHATSMYREALNAME" install

}

cpngremove () {

    [ -f /etc/cron.d/"$WHATSMYREALNAME" ] || { printmeslog "$WHATSMYREALNAME is not installed" red; return 1; }
    systeminit
    printmeslog 'Stopping Nginx...' blue
    service nginx stop
    printmeslog 'Erasing Apache includes for Nginx...' blue
    rm -f /etc/apache2/conf.d/"$WHATSMYREALNAME".*.conf
    printmeslog 'Restoring Apache listening ports...' blue
    whmapi1 set_tweaksetting key=apache_port value=0.0.0.0:80
    whmapi1 set_tweaksetting key=apache_ssl_port value=0.0.0.0:443
    /scripts/rebuildhttpdconf
    /scripts/restartsrv_apache_php_fpm
    /scripts/restartsrv_httpd
    printmeslog 'Removing Nginx...' blue
    $PKGMGR -y remove nginx
    rm -f /etc/yum.repos.d/nginx.repo
    printmeslog 'Removing '"$WHATSMYREALNAME"' files...' blue
    rm -f /scripts/*nginx* /etc/cron.d/"$WHATSMYREALNAME" /etc/profile.d/"$WHATSMYREALNAME".sh
    service crond reload
    printmeslog "$WHATSMYREALNAME has been removed" green

}

nginxrebuild () {

    printmeslog 'Generating Nginx configuration...' blue
    echo > "$TMPFILE"
    nginxgenerateconf > /etc/nginx/conf.d/"$WHATSMYREALNAME".conf
    chmod 600 /etc/nginx/conf.d/"$WHATSMYREALNAME".conf
    printmeslog "Built /etc/nginx/conf.d/$WHATSMYREALNAME.conf OK" green

}

cpngcron () {

    [ "$HTTPDCONF" -nt "$TMPFILE" ] && printmeslog "$HTTPDCONF has updates" blue || { printmes "$HTTPDCONF has updates" red; return 0; }
    echo > "$TMPFILE"
    nginxrebuild
    nginxreload

}

nginxreload () {

    nginx -t && {
        printmeslog 'Reloading Nginx...' blue
        nginx -s reload && {
            printmeslog 'Nginx reloaded successfully' green
        } || {
            printmeslog 'Nginx reload failed, trying restart' red
            service nginx restart && {
                printmeslog 'Nginx restarted successfully' green
            } || {
                printmeslog 'Nginx restart failed' red; return 1
            }
        }
    } || {
        printmeslog 'Nginx configuration test failed' red; return 1
    }

}

nginxgenerateconf () {

    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'

###################
# Global snippets #
###################

    server_tokens off;
    include '"$WHATSMYREALNAME"'.global.*.conf;

########################
# Apache virtual hosts #
########################

limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
'

    for DOMAIN in $(cut -d: -f1 /etc/userdatadomains); do
        echo '
### '"$DOMAIN"' ###
    '
        DOMAINLINE=$(grep "^$DOMAIN:" /etc/userdatadomains)
        DOMAINUSER=$(awk -F': |==' '{print $2}' <<< "$DOMAINLINE")
        USERDATADOMAIN=/var/cpanel/userdata/"$DOMAINUSER"/"$DOMAIN"
        USERDATADOMAINSSL=/var/cpanel/userdata/"$DOMAINUSER"/"$DOMAIN"_SSL
        IPADDR=$(awk -F': ' '/^ip:/ {print $2}' "$USERDATADOMAIN")
        SERVERNAME=$(echo $(awk -F': ' '/^server(name|alias):/ {print $2}' "$USERDATADOMAIN"))
        [ -f "$USERDATADOMAIN".php-fpm.yaml ] && {
            DOCROOT=$(awk -F': ' '/^documentroot:/ {print $2}' "$USERDATADOMAIN")
            ACCESSLOG=/var/log/apache2/domlogs/"$DOMAIN"
            PHPVER=$(awk -F': ' '/^phpversion:/ {print $2}' "$USERDATADOMAIN")
            FPMSOCK=$(awk -F'= ' '/^listen =/ {print $2}' /opt/cpanel/"$PHPVER"/root/etc/php-fpm.d/"$DOMAIN".conf)

            echo 'server {

    listen      '"$IPADDR"':80;
    server_name '"$SERVERNAME"';
    root        '"$DOCROOT"';

    access_log  '"${ACCESSLOG//\*/_wildcard_}"';
    error_log   /var/log/apache2/error_log;

    index       index.php index.phtml index.html index.htm;
    try_files   $uri $uri/ /index.php?$args;

    location ~ \.(phtml|php[0-9]*)$ {
        try_files       $uri =404;
        fastcgi_pass    unix:'"$FPMSOCK"';
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include         fastcgi_params;
    }

        location = /wp-login.php {
                limit_req zone=one burst=1 nodelay;
                include fastcgi_params;
                fastcgi_pass unix:'"$FPMSOCK"';
        }

    include '"$WHATSMYREALNAME"'.nginxcommon.*.conf;
    include '"$WHATSMYREALNAME"'.nginxhttp.*.conf;

    include '"$DOCROOT"'/.ngaccesshttp.*.conf;
    include '"$DOCROOT"'/.ngaccesscommon.*.conf;

}
'
            [ -z "$USERDATADOMAINSSL" ] || {
            IPADDR=$(awk -F': ' '/^ip:/ {print $2}' "$USERDATADOMAINSSL")
            SERVERNAME=$(echo $(awk -F': ' '/^server(name|alias):/ {print $2}' "$USERDATADOMAINSSL"))
            DOCROOT=$(awk -F': ' '/^documentroot:/ {print $2}' "$USERDATADOMAINSSL")
            ACCESSLOG="$ACCESSLOG"-ssl_log
            DOMAINSSL=/var/cpanel/ssl/apache_tls/"$DOMAIN"/combined
                echo 'server {

    listen      '"$IPADDR"':443 ssl http2;
    server_name '"$SERVERNAME"';
    root        '"$DOCROOT"';

    access_log  '"${ACCESSLOG//\*/_wildcard_}"';
    error_log   /var/log/apache2/error_log;

    index       index.php index.phtml index.html index.htm;
    try_files   $uri $uri/ /index.php?$args;

    location ~ \.(phtml|php[0-9]*)$ {
        try_files       $uri =404;
        fastcgi_pass    unix:'"$FPMSOCK"';
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include         fastcgi_params;
    }

    ssl_certificate     '"$DOMAINSSL"';
    ssl_certificate_key '"$DOMAINSSL"';

        location = /wp-login.php {
                limit_req zone=one burst=1 nodelay;
                include fastcgi_params;
                fastcgi_pass unix:'"$FPMSOCK"';
        }

    include '"$WHATSMYREALNAME"'.nginxcommon.*.conf;
    include '"$WHATSMYREALNAME"'.nginxhttp.*.conf;

    include '"$DOCROOT"'/.ngaccesshttps.*.conf;
    include '"$DOCROOT"'/.ngaccesscommon.*.conf;

}
'
            }
        } || {
            echo 'server {

    listen      '"$IPADDR"':80;
    server_name '"$SERVERNAME"';

    location / {
        proxy_pass          http://'"$IPADDR"':8080;
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
	}

    include '"$WHATSMYREALNAME"'.apachecommon.*.conf;
    include '"$WHATSMYREALNAME"'.apachehttp.*.conf;

}
'
            [ -z "$USERDATADOMAINSSL" ] || {
                IPADDR=$(awk -F': ' '/^ip:/ {print $2}' "$USERDATADOMAINSSL")
                SERVERNAME=$(echo $(awk -F': ' '/^server(name|alias):/ {print $2}' "$USERDATADOMAINSSL"))
                DOMAINSSL=/var/cpanel/ssl/apache_tls/"$DOMAIN"/combined
                echo 'server {

    listen      '"$IPADDR"':443 ssl http2;
    server_name '"$SERVERNAME"';

    location / {
        proxy_pass          https://'"$IPADDR"':8443;
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
	}

    ssl_certificate     '"$DOMAINSSL"';
    ssl_certificate_key '"$DOMAINSSL"';

    include '"$WHATSMYREALNAME"'.apachecommon.*.conf;
    include '"$WHATSMYREALNAME"'.apachehttps.*.conf;

}
'
            }
        }
    done
    echo '
######################################
# Redirect everything else to Apache #
######################################
'
    for SERVERIP in $(hostname -I) 127.0.0.1; do
                echo 'server {

    listen      '"$SERVERIP"':80;
    server_name _;

    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }

    location = /whm-server-status {
        proxy_pass http://127.0.0.1:8080;
        allow 127.0.0.1;
        deny all;
    }

    location / {
        proxy_pass          http://'"$SERVERIP"':8080;
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
	}

    include '"$WHATSMYREALNAME"'.apachecommon.*.conf;
    include '"$WHATSMYREALNAME"'.apachehttp.*.conf;

}
'
                echo 'server {

    listen      '"$SERVERIP"':443 ssl http2;
    server_name _;

    location / {
        proxy_pass          https://'"$SERVERIP"':8443;
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
	}

    include '"$WHATSMYREALNAME"'.apachecommon.*.conf;
    include '"$WHATSMYREALNAME"'.apachehttp.*.conf;

}
'
    done

}

nginxshowconf () {

    cat /etc/nginx/conf.d/"$WHATSMYREALNAME".conf

}

gencompletion () {

    echo '# Generated by '"$WHATSMYREALNAME"' on '"$(date)"'
_'"$WHATSMYREALNAME"' () {

    COMPREPLY+=( $(compgen -W "
-h
--help
help
rebuild
reload
dryrun
show
install
update
remove
" -- ${COMP_WORDS[COMP_CWORD]}) )

}

complete -F _'"$WHATSMYREALNAME"' '"$WHATSMYREALNAME"''

}

cpnghelp () {
    echo '                    
  _________  ____  ____ _
 / ___/ __ \/ __ \/ __ `/  Nginx for cPanel
/ /__/ /_/ / / / / /_/ /   Just enable PHP-FPM for domain
\___/ .___/_/ /_/\__, /    More info, documentation and support:
   /_/          /____/     https://github.com/zhubanRuban/'"$WHATSMYREALNAME"'

Usage:
    '"$WHEREAMI"' [option]

Options:
    -h|--help|help  show this help message

    rebuild         rebild Nginx configuration and reload Nginx
                    it is also symlinked to /scripts/rebuildnginxconf for convenience to do it cPanel-way
    reload          check configuration, reload Nginx if check succeeds, restart Nginx if reload fails
                    it is also symlinked to /scripts/restartsrv_nginx for convenience to do it cPanel-way

    dryrun          display configuration to be aplied, but do not apply
    show            show applied configuration

    install         install '"$WHATSMYREALNAME"'
    update          update '"$WHATSMYREALNAME"'
    remove          remove '"$WHATSMYREALNAME"'
'
    return 0

}

set -e
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
WHATSMYREALNAME=cpng
WHATSMYNAME=$(basename $0)
WHEREAMI=$(readlink -f $0)
LOGFILE=/var/log/nginx/"$WHATSMYREALNAME".log
HTTPDCONF=/etc/apache2/conf/httpd.conf
TMPFILE=/tmp/"$WHATSMYREALNAME".tmp

for ARG in "$@"; do
    case $ARG in
        -h|--help|help)	shift; cpnghelp;;
        rebuild)        shift; nginxrebuild;;
        cron)           shift; cpngcron;;
        reload)         shift; nginxreload;;
        dryrun)         shift; nginxgenerateconf;;
        show)           shift; nginxshowconf;;
        install)        shift; cpnginstall;;
        update)         shift; cpngupdate;;
        remove)         shift; cpngremove;;
        *)              shift; printmes "'$1': no such option" red; cpnghelp;;
    esac
done